<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible"
          content="ie=edge">
    <meta name=
          "apple-mobile-web-app-status-bar"
          content="#07305c">
    <meta name="theme-color" content="#07305c">

    <!-- Manifest File link -->
    <link rel="manifest"
          href="{{ asset('manifest.json') }}">
<title>Title</title>
{% block headscripts %}{% endblock %}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="{{ asset('css/main.css') }}">
<script src="{{ asset('js/fnc.js') }}"></script>
</head>
<body style="display: none" class="container-fluid vh-100 vw-100">
{% block body %}{% endblock %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="{{ asset('js/form.js') }}"></script>
<script type="module">
    import QrScanner from "{{ asset('js/qr-scanner.js') }}";
    QrScanner.WORKER_PATH = '{{ asset('js/qr-scanner-worker.min.js') }}';

    const video = document.getElementById('qr-video');
    let streaming = null, width = document.body.clientWidth
    video.setAttribute('style', 'margin-left:-33vh;');
    let height = video.videoHeight / (video.videoWidth / width);
    video.setAttribute('width', width);
    video.setAttribute('height', height);
    streaming = !0;
    // ####### Web Cam Scanning #######

    const scanner = new QrScanner(video, result => console.log('decoded qr code:', result));


    scanner.start()

    QrScanner.hasCamera().then(hasCamera => camHasCamera.textContent = hasCamera);

    // for debugging
    window.scanner = scanner;



    document.getElementById('start-button').addEventListener('click', () => {
        scanner.start();
    });

    document.getElementById('stop-button').addEventListener('click', () => {
        scanner.stop();
    });

    // ####### File Scanning #######

    fileSelector.addEventListener('change', event => {
        const file = fileSelector.files[0];
        if (!file) {
            return;
        }
        QrScanner.scanImage(file)
            .then(result => setResult(fileQrResult, result))
            .catch(e => setResult(fileQrResult, e || 'No QR code found.'));
    });

</script>
<script>
    const app = new bootstrap.Modal(document.getElementById('app'), {});
    document.querySelectorAll('[title]').forEach(t => {
        return new bootstrap.Tooltip(t)
    })
    if (window.location.href.split('@')[1]) {
        genLink(window.location.href);
    }

   /* window.addEventListener('load', () => {
        //registerSW();
    });
*/

    // Register the Service Worker
    async function registerSW() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.getRegistrations().then(function(registrations) {

                for(let registration of registrations) {

                    registration.unregister()

                }}).catch(function(err) {

                console.log('Service Worker registration failed: ', err);

            });
            try {
                await navigator
                    .serviceWorker
                    .register('{{ asset('js/sw.js') }}');
            } catch (e) {
                console.log('SW registration failed');
            }
        }
    }
</script>
{% block javascripts %}
{% endblock %}
</body>
</html>
